!function(){"use strict";angular.module("GigKeeper",["ng","ngResource","ui.router","ui.router.title","kendo.directives","google.places","ui.bootstrap","ui.grid","ui.grid.edit","ui.grid.selection"])}();
!function(){"use strict";angular.module("GigKeeper").controller("contact",[function(){}])}();
!function(){"use strict";angular.module("GigKeeper").controller("contractors",["$scope","$uibModal","dialogs","Contractor",function(e,t,n,o){function r(){o.data.index().$promise.then(function(t){e.gridOptions.data=t}).catch(function(e){console.error(e)})}function a(e){t.open({ariaLabelledBy:"modal-title",ariaDescribedBy:"modal-body",templateUrl:"/template/contractorEdit.html",controller:"ContractorEditController",resolve:{contractor:function(){return e}}}).result.then(function(){r()},function(){})}e.selected=null,e.gridOptions={enableRowSelection:!0,enableSelectAll:!1,multiSelect:!1,enableRowHeaderSelection:!1,enableSorting:!0,columnDefs:[{name:"Name",field:"name",type:"string"},{name:"Contact",field:"contact",type:"string"},{name:"Phone",field:"phone",type:"string"},{name:"Email",field:"email",type:"string"}],data:[],onRegisterApi:function(t){t.selection.on.rowSelectionChanged(e,function(t){t.isSelected?e.selected=t:e.selected=null})}},e.selected=null,r(),e.add=function(){a({})},e.editSelected=function(){a(e.selected.entity)},e.deleteSelected=function(){n.confirm({okText:"Delete",title:"Confirm Delete",message:"Are you sure you want to delete "+e.selected.entity.name+"?"}).then(function(){o.data.delete({id:e.selected.entity.id}).$promise.then(function(){r()}).catch(function(e){console.error(e)})},function(){})}}]),angular.module("GigKeeper").controller("ContractorEditController",["$scope","$uibModalInstance","Contractor","contractor",function(e,t,n,o){e.form={id:o.id,name:o.name,contact:o.contact,address1:o.address1,address2:o.address2,city:o.city,region:o.region,postalCode:o.postalCode,phone:o.phone,email:o.email,web:o.web},e.submit=function(r){if(r.$invalid)e.errorMessage="Check form for errors";else{var a=angular.element("#save_button");a.button("loading");var i,c={name:e.form.name,contact:e.form.contact,address1:e.form.address1,address2:e.form.address2,city:e.form.city,region:e.form.region,postalCode:e.form.postalCode,phone:e.form.phone,email:e.form.email,web:e.form.web};i=o.id?n.data.update({id:o.id},c).$promise:n.data.create({},c).$promise,i.then(function(){t.close(),a.button("reset")}).catch(function(t){e.errorMessage=t.message,a.button("reset")})}},e.cancel=function(){t.dismiss("cancel")}}])}();
!function(){"use strict";angular.module("GigKeeper").controller("gigs",["$scope","$uibModal","uiGridConstants","dialogs","contractors","Gig","UrlBuilder",function(e,t,n,o,a,i,r){function l(){i.data.index().$promise.then(function(t){e.gridOptions.data=t}).catch(function(e){console.error(e)})}function c(e){t.open({ariaLabelledBy:"modal-title",ariaDescribedBy:"modal-body",templateUrl:"/template/gigEdit.html",controller:"GigEditController",resolve:{gig:function(){return e}}}).result.then(function(){l()},function(){})}e.selected=null,e.gridOptions={enableFiltering:!0,enableRowHeaderSelection:!1,enableRowSelection:!0,enableSelectAll:!1,enableSorting:!0,multiSelect:!1,paginationPageSize:10,paginationPageSizes:[10,25,50,100],showColumnFooter:!0,showGridFooter:!0,columnDefs:[{name:"Contractor",field:"contractor.name",type:"string",filter:{type:n.filter.SELECT,selectOptions:a.map(function(e){return{value:e.name,label:e.name}})}},{name:"Description",field:"name",type:"string"},{name:"Location",field:"place.name",type:"string"},{name:"Distance",field:"distance",type:"string",cellFilter:"number:1",footerCellFilter:"number:1",cellClass:"text-right",footerCellClass:"text-right",aggregationHideLabel:!0,aggregationType:n.aggregationTypes.sum},{name:"Travel Time",field:"duration",type:"number",cellFilter:"number:0",footerCellFilter:"number:0",cellClass:"text-right",footerCellClass:"text-right",aggregationHideLabel:!0,aggregationType:n.aggregationTypes.sum},{name:"Start",field:"startDate",type:"date",cellFilter:'date:"MM/dd/yyyy hh:mm a"'},{name:"End",field:"endDate",type:"date",cellFilter:'date:"MM/dd/yyyy hh:mm a"'}],data:[],onRegisterApi:function(t){t.selection.on.rowSelectionChanged(e,function(t){t.isSelected?e.selected=t:e.selected=null})}},e.selected=null,l(),e.add=function(){c({})},e.editSelected=function(){c(e.selected.entity)},e.deleteSelected=function(){o.confirm({okText:"Delete",title:"Confirm Delete",message:"Are you sure you want to delete "+e.selected.entity.name+"?"}).then(function(){i.data.delete({id:e.selected.entity.id}).$promise.then(function(){l()}).catch(function(e){console.error(e)})},function(){})}}]),angular.module("GigKeeper").controller("GigEditController",["$scope","$uibModalInstance","Contractor","Tag","Gig","gig","UrlBuilder",function(e,t,n,o,a,i,r){e.contractorDropdownOptions=n.getDropdownOptions(),e.descriptionsComboOptions={autoBind:!1,dataSource:new kendo.data.DataSource({transport:{read:{url:r.build("/api/v1/gig/descriptions")}}}),dataTextField:"name",dataValueField:"name"},e.distanceOptions={decimals:1,min:0,format:"n1"},e.durationOptions={decimals:0,min:0,format:"n0"},e.tagDropdownOptions=o.getDropdownOptions(),e.form={name:i.name,place:angular.fromJson(i.place),distance:i.distance,duration:i.duration,startDate:new Date(i.startDate),endDate:new Date(i.endDate),contractorId:i.contractorId,tags:i.tags,notes:i.notes},e.estimateDistance=function(){if(e.form.place){var t=angular.element("#estimate_button");t.button("loading"),a.data.distanceTo({placeId:e.form.place.place_id}).$promise.then(function(n){if(n){var o=n.rows[0].elements[0];e.form.distance=o.distance.value/1e3/1.609344,e.form.duration=o.duration.value/60}else console.log(n);t.button("reset")}).catch(function(e){console.log(e),t.button("reset")})}else console.log("Please select a location")},e.next=function(){},e.prev=function(){},e.submit=function(n){if(n.$invalid)e.errorMessage="Check form for errors";else{var o=angular.element("#save_button");o.button("loading");var r,l={name:e.form.name,place:e.form.place,distance:e.form.distance,duration:e.form.duration,startDate:e.form.startDate,endDate:e.form.endDate,contractorId:e.form.contractorId,tags:e.form.tags,notes:e.form.notes};r=i.id?a.data.update({id:i.id},l).$promise:a.data.create({},l).$promise,r.then(function(){t.close(),o.button("reset")}).catch(function(t){e.errorMessage=t.message,o.button("reset")})}},e.cancel=function(){t.dismiss("cancel")}}])}();
!function(){"use strict";angular.module("GigKeeper").controller("home",["$rootScope","$scope","$state","$http","UrlBuilder",function(a,t,e,o,r){t.submitLoginForm=function(s){if(s.$valid){var i={email:t.email,password:t.password};o.post(r.build("/api/v1/login"),i).then(function(t){200===t.status?(a.profile=t.data,e.go("my")):alert("Bad username or password")}).catch(function(a){a.data&&a.data.message?alert(a.data.message):alert("System error")})}}}])}();
!function(){"use strict";angular.module("GigKeeper").controller("profile",["$scope","$http","UrlBuilder",function(e,o,r){e.form={},o.get(r.build("/api/v1/user/profile")).then(function(o){e.form.email=o.data.email,e.form.homeBaseAddress=o.data.profile.homeBaseAddress}).catch(function(e){console.error(e)})}])}();
!function(){"use strict";angular.module("GigKeeper").controller("settings",["$scope","Settings","settings",function(e,t,o){e.homeBaseOptions={placeIdOnly:!0},e.form={homeBasePlace:o.homeBasePlace},e.submit=function(o){if(o.$invalid)e.errorMessage="Check form for errors";else{var s=angular.element("#save_button");s.button("loading");var a={homeBasePlace:e.form.homeBasePlace};t.data.update({},a).$promise.then(function(){s.button("reset")}).catch(function(t){e.errorMessage=t.message,s.button("reset")})}}}])}();
!function(){"use strict";angular.module("GigKeeper").controller("tags",["$scope","$uibModal","dialogs","Tag",function(e,t,n,o){function i(){o.data.index().$promise.then(function(t){e.gridOptions.data=t}).catch(function(e){console.error(e)})}function l(e){t.open({ariaLabelledBy:"modal-title",ariaDescribedBy:"modal-body",templateUrl:"/template/tagEdit.html",controller:"TagEditController",resolve:{tag:function(){return e}}}).result.then(function(){i()},function(){})}e.selected=null,e.gridOptions={enableRowSelection:!0,enableSelectAll:!1,multiSelect:!1,enableRowHeaderSelection:!1,enableSorting:!0,columnDefs:[{name:"Name",field:"name",type:"string"},{name:"Description",field:"description"}],data:[],onRegisterApi:function(t){t.selection.on.rowSelectionChanged(e,function(t){t.isSelected?e.selected=t:e.selected=null})}},e.selected=null,i(),e.add=function(){l({})},e.editSelected=function(){l(e.selected.entity)},e.deleteSelected=function(){n.confirm({okText:"Delete",title:"Confirm Delete",message:"Are you sure you want to delete "+e.selected.entity.name+"?"}).then(function(){o.data.delete({id:e.selected.entity.id}).$promise.then(function(){i()}).catch(function(e){console.error(e)})},function(){})}}]),angular.module("GigKeeper").controller("TagEditController",["$scope","$uibModalInstance","Tag","tag",function(e,t,n,o){e.form={id:o.id,name:o.name,description:o.description},e.submit=function(i){if(i.$invalid)e.errorMessage="Check form for errors";else{var l=angular.element("#save_button");l.button("loading");var a,c={name:e.form.name,description:e.form.description};a=o.id?n.data.update({id:o.id},c).$promise:n.data.create({},c).$promise,a.then(function(){t.close(),l.button("reset")}).catch(function(t){e.errorMessage=t.message,l.button("reset")})}},e.cancel=function(){t.dismiss("cancel")}}])}();
!function(){"use strict";angular.module("GigKeeper").config(["$stateProvider","$urlRouterProvider","$titleProvider",function(t,e,r){e.otherwise("/"),t.state({name:"home",url:"/",controller:"home",templateUrl:"/template/home.html",public:!0,resolve:{$title:function(){return"Home"}}}).state({name:"my",url:"/my",templateUrl:"/template/my.html",resolve:{$title:function(){return"My Stuff"}}}).state({name:"my.gigs",url:"/gigs",controller:"gigs",templateUrl:"/template/gigs.html",resolve:{contractors:function(t){return t.data.index().$promise},$title:function(){return"My Gigs"}}}).state({name:"my.contractors",url:"/contractors",controller:"contractors",templateUrl:"/template/contractors.html",resolve:{$title:function(){return"My Contractors"}}}).state({name:"my.tags",url:"/tags",controller:"tags",templateUrl:"/template/tags.html",resolve:{$title:function(){return"My Tags"}}}).state({name:"my.settings",url:"/settings",controller:"settings",templateUrl:"/template/settings.html",resolve:{settings:function(t){return t.data.index().$promise},$title:function(){return"Settings"}}}).state({name:"about",url:"/about",templateUrl:"/template/about.html",resolve:{$title:function(){return"About"}},public:!0}).state("contact",{name:"contact",url:"/contact",templateUrl:"/template/contact.html",resolve:{$title:function(){return"Contact"}},public:!0}).state({name:"profile",url:"/profile",controller:"profile",templateUrl:"/template/profile.html",resolve:{$title:function(){return"My Profile"}}}),r.documentTitle(["$rootScope",function(t){var e="GigKeeper";return t.$title&&(e=t.$title+" - "+e),e}])}])}();
!function(){"use strict";angular.module("GigKeeper").run(["$rootScope","$state","$http","UrlBuilder",function(t,o,e,n){t.profile=!1,t.$on("$stateChangeStart",function(u,i){i.public||e.get(n.build("/api/v1/user/profile")).then(function(e){e.data.active?t.profile=e.data:(t.profile=null,u.preventDefault(),o.go("home"))}).catch(function(t){u.preventDefault(),o.go("home")})}),t.logout=function(){e.post(n.build("/api/v1/logout")).then(function(e){t.profile=null,o.go("home")}).catch(function(t){console.log(t)})}}])}();
!function(){"use strict";angular.module("GigKeeper").factory("Contractor",["$resource",function(t){return{data:t("/api/v1/contractor",{},{index:{action:"index",method:"GET",isArray:!0},create:{action:"create",method:"POST"},update:{action:"update",method:"POST",url:"/api/v1/contractor/:id"},delete:{action:"delete",method:"DELETE",url:"/api/v1/contractor/:id"}}),getModel:function(){return kendo.data.Model.define({id:"id",fields:{name:{type:"string"},address1:{type:"string"},address2:{type:"string"},city:{type:"string"},region:{type:"string"},postalCode:{type:"string"},phone:{type:"string"},email:{type:"string"},web:{type:"string"}}})},getDataSource:function(){return new kendo.data.DataSource({transport:{read:{url:"/api/v1/contractor"}},schema:{model:this.getModel()}})},getDropdownOptions:function(){return{dataSource:this.getDataSource(),autoBind:!0,dataTextField:"name",dataValueField:"id",valuePrimitive:!0}}}}])}();
!function(){"use strict";angular.module("GigKeeper").factory("dialogs",["$uibModal",function(e){return{confirm:function(n){var t=Object.assign({okText:"OK",cancelText:"Cancel",title:"Confirm",message:"Are you sure?"},n);return e.open({ariaLabelledBy:"modal-title",ariaDescribedBy:"modal-body",templateUrl:"/dialogs/confirm.html",resolve:{dialogSettings:function(){return t}},controller:["$scope","$uibModalInstance","dialogSettings",function(e,n,t){e.dialogSettings=t,e.ok=function(){n.close()},e.cancel=function(){n.dismiss("cancel")}}]}).result}}}])}();
!function(){"use strict";angular.module("GigKeeper").factory("Gig",["$resource",function(t){return{data:t("/api/v1/gig",{},{index:{action:"index",method:"GET",isArray:!0},create:{action:"create",method:"POST"},update:{action:"update",method:"POST",url:"/api/v1/gig/:id"},delete:{action:"delete",method:"DELETE",url:"/api/v1/gig/:id"},distance:{action:"distance",method:"GET",url:"/api/v1/gig/:id/distance"},distanceTo:{action:"distanceTo",method:"GET",url:"/api/v1/gig/distance/:placeId"}}),getModel:function(){return kendo.data.Model.define({id:"id",fields:{name:{type:"string"},location:{type:"string"},startDate:{type:"string"},endDate:{type:"string"},contractorId:{type:"string"}}})},getDataSource:function(){return new kendo.data.DataSource({transport:{read:{url:"/api/v1/gig"}},schema:{model:this.getModel()}})},getDropdownOptions:function(){return{dataSource:this.getDataSource(),autoBind:!1,dataTextField:"name",dataValueField:"id"}}}}])}();
!function(){"use strict";angular.module("GigKeeper").factory("Settings",["$resource",function(t){return{data:t("/api/v1/settings",{},{index:{action:"index",method:"GET"},update:{action:"update",method:"POST",url:"/api/v1/settings"}})}}])}();
!function(){"use strict";angular.module("GigKeeper").factory("SoftErrorInterceptor",["$uibModal",function(e){function n(n){window.test=n;var t=Object.assign({okText:"OK",cancelText:"Cancel",title:"Confirm",message:"Are you sure?"},dialogOptions);e.open({ariaLabelledBy:"modal-title",ariaDescribedBy:"modal-body",templateUrl:"/dialogs/confirm.html",resolve:{dialogSettings:function(){return t}},controller:["$scope","$uibModalInstance","dialogSettings",function(e,n,t){e.dialogSettings=t,e.ok=function(){n.close()},e.cancel=function(){n.dismiss("cancel")}}]})}return{response:function(e){return e},responseError:function(e){return n(e),$q.reject(e)}}}])}();
!function(){"use strict";angular.module("GigKeeper").factory("Tag",["$resource",function(e){return{data:e("/api/v1/tag",{},{index:{action:"index",method:"GET",isArray:!0},create:{action:"create",method:"POST"},update:{action:"update",method:"POST",url:"/api/v1/tag/:id"},delete:{action:"delete",method:"DELETE",url:"/api/v1/tag/:id"}}),getModel:function(){return kendo.data.Model.define({id:"id",fields:{name:{type:"string"},description:{type:"string"}}})},getDataSource:function(){return new kendo.data.DataSource({transport:{read:{url:"/api/v1/tag"}},schema:{model:this.getModel()}})},getDropdownOptions:function(){return{dataSource:this.getDataSource(),autoBind:!0,dataTextField:"name",dataValueField:"id"}}}}])}();
!function(){"use strict";angular.module("GigKeeper").factory("UrlBuilder",[function(){return{build:function(r){var t=window.appConfig.api;return"http://"+t.host+":"+t.port+r}}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
